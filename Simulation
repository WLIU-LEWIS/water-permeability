function nihe_0420
 %   微分方程参数估计
 %
clear all;
clc;
format long;
global t0;
% a,b 对应k(1)、k(2)
k0 =[0.0001;80]; % 参数初值，重要！，可将结果反复代入迭代计算！！
% lb = [0 0];   % 参数下限,根据拟合结果，适当调整
% ub = [100 100];    % 参数上限
x0 = 2167.61;  %初始状态
% 实验数据:
expdata= ...
[268.65	2209.211646
268.15	2229.836191
267.65	2076.341982
267.15	1962.598499
266.65	2013.32254
266.15	1887.592141
265.65	1848.943155
265.15	1850.838145
264.65	1771.909598
264.15	1728.457032
263.65	1692.320009
263.15	1661.647609
262.65	1637.629709
262.15	1618.283181
261.65	1594.44156
261.15	1581.352906
260.65	1566.325193
260.15	1547.948195
259.65	1525.693077
259.15	1517.584282
258.65	1502.292151
258.15	1492.993478
257.65	1478.230182
257.15	1467.389075
256.65	1465.317807
256.15	1455.886925
255.65	1449.805329
255.15	1440.550725
254.65	1436.937023
254.15	1428.740089
253.65	1425.126386
253.15	1420.763502
252.65	1418.339677
252.15	1415.739574
251.65	1413.095402
251.15	1411.949594
250.65	1409.746117
250.15	1407.939266
249.65	1407.101944
249.15	1406.176484
248.65	1404.193355
248.15	1403.003477
247.65	1401.461043
247.15	1400.006748
246.65	1398.86094
246.15	1397.979549
245.65	1397.803271
245.15	1396.745602
244.65	1396.92188
244.15	1396.657463
243.65	1396.393046
243.15	1396.393046];
t0=expdata(:,1);
yexp =expdata(:,2);         % yexp: 对应实验数据[N1,N2]

% ------------------------------------------------------------------
% 使用函数lsqnonlin()进行参数估计
% k=lsqnonlin(@ObjFunc4LNL,k0,lb,ub,[],x0,yexp);
k=lsqnonlin(@ObjFunc4LNL,k0,[],[],[],x0,yexp);   

fprintf('\n\n使用函数lsqnonlin()估计得到的参数值为:\n')
fprintf('\ta = %.8e\n',k(1)) 
fprintf('\tb = %.8e\n',k(2))


% ---------计算拟合统计参数-------------------
tspan = t0';     % 这里是时间，可以直接输入时间序列(行向量)，如：tspan=t0'，下同;
                             % 若计算不收敛，则减小时间步，后面需要插值处理，使理论值的个数与实验值相同
[t,x] = ode45(@KineticEqs,tspan,x0,[],k);

fprintf('\nlsqnonlin函数拟合后的统计量:\n')
% 计算相关系数
A=corrcoef(yexp(:,1),x(:,1));
fprintf('\n相关系数R为:\n')
fprintf('\tR = %.8f\n',A(1,2))
% 
% 计算决定系数
r(1)=1-sum((yexp(:,1)-x(:,1)).^2)./sum((yexp(:,1)-mean(yexp(:,1))).^2);
% ********************************决定系数
fprintf('\n决定系数R^2为:\n')
fprintf('\tR^2 = %.8f\n',r(1))

% 计算均方根误差
rmse(1)=sqrt(sum((yexp(:,1)-x(:,1)).^2)/length(t0));
fprintf('\n均方根误差RMSE为:\n')
fprintf('\tRMSE = %.8f\n',rmse(1))
% 
% % 计算回归平方和 SSR(Sum of Squares for regression)
% ssr(1)=sum((x(:,1)-mean(yexp(:,1))).^2);
% fprintf('\n回归平方和SSR为:\n')
% fprintf('\tSSR = %.8f\n',ssr(1))

% 计算残差平方和 SSE（Sum of Squares for Error）
ssr(1)=sum((yexp(:,1)-x(:,1)).^2);
fprintf('\n残差平方和为:\n')
fprintf('\tSSE = %.8f\n',ssr(1))

% ----------------------------------------------------
figure(1)
T=t-273.15;
V=x(:,1)/2167.61;
Y=t0-273.15;
Z=yexp(:,1)/2167.61;
plot(T,V,'b-',Y,Z,'ro'),legend('Model simluations (R^2=0.9902)','DSC data','Location','best')
xlabel('Temperature (℃)');ylabel('Normalized cell volume V/V0');
set(gca,'FontSize',13);
set(gca,'xdir','reverse');
set(gca,'ylim',[0.4,1.1])%将y轴上的取值范围设置为[y1,y2]

%去除右上坐标
box off;
ax1 = axes('Position',get(gca,'Position'),...
    'XAxisLocation','top',...
    'YAxisLocation','right',...
   'Color','none',...
    'XColor','k','YColor','k');
set(ax1,'XTick',[]);
set(ax1,'YTick',[]);

% ------------------------------------------------------------------
function f = ObjFunc4LNL(k,x0,yexp)
tspan = t0';   
[t,x] = ode45(@KineticEqs,tspan,x0,[],k); 
f1 = x(:,1) - yexp(:,1);
f=f1; % 理论值与实验值的差值，残差
end

% ------------------------------------------------------------------
function dydt = KineticEqs(t,y,k)   % 微分方程 ,a,b分别为 k(1),k(2)
c= 809.97; % A_C为水分渗透的有效膜面积
d= 8.314; % 气体常数(原数值8.314)
e= 5; % 降温速率
f= 18e012; % 水的偏摩尔体积 
g= 1400.80; % 细胞的不可渗透体积
h= 2; % 盐分的解离常数
ii= 3.33e-013; % 细胞内的盐分子的摩尔数(6.55e-017)
jj= 333.88; % 冰的熔融潜热
kk= 1e-012; % 水的密度(原数值1e-6)
l= 273.15; % 参考温度
m= 5.42e-13;%细胞内的保护剂摩尔数
p= 7.103e13; %保护剂的偏摩尔体积

dydt = 1e18*k(1)*c*d*t*(exp(-k(2)/d*(1/t-1/l)))/(e*f)*(log((y-g-m*p)/(y-g-m*p+h*ii/f))-(jj*f*kk/d)*(1/l-1/t));
end
% ------------------------------------------------------------------
end
